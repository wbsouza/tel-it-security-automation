---
# tel-it-security-automation :- Ansible roles for automated security hardening.  
# Copyright (c) 2020 Maximilian Hertstein [...] Deutsche Telekom AG 
# contact: devsecops@telekom.de 
# This file is distributed under the conditions of the Apache-2.0 license. 
# For details see the files LICENSING, LICENSE, and/or COPYING on the toplevel.

# ========================================================================
# Deutsch Telekom IT - DevSecOps Team
# ------------------------------------------------------------------------
# Security Hardening & Compliance Checks
# Linux OS for Servers (3.65)
#
# Main Tasks
# ========================================================================

- debug:
    msg: "family: {{ ansible_os_family }}; distro: {{ ansible_distribution }}; version {{ ansible_distribution_version }}"

# Stop playbook if Linux distro and version is not supported.
- fail:
    msg: "Your {{ansible_distribution}} is not supported!"
  when:
    - ansible_distribution != "RedHat"
    - ansible_distribution != "CentOS" 
    - ansible_distribution != "Amazon"
    - ansible_distribution != "Ubuntu" 
    - ansible_distribution != "SLES"

# Read variables for detected OS from '/vars/var_<linux-os>.yml' files
- name: read variables for redhat 7
  include_vars: "vars_os_redhat_7.yml"
  when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "7"

- name: read variables for redhat 8
  include_vars: "vars_os_redhat_8.yml"
  when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"

- name: read variables for centos 7
  include_vars: "vars_os_centos_7.yml"
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

- name: read variables for centos 8
  include_vars: "vars_os_centos_8.yml"
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "8"

- name: read variables for amazon linux
  include_vars: "vars_os_amazon_2.yml"
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2"

- name: read variables for suse 12
  include_vars: "vars_os_suse_12.yml"
  when: ansible_os_family == "Suse" and ansible_distribution_major_version == "12"

- name: read variables for suse 15
  include_vars: "vars_os_suse_12.yml"
  when: ansible_os_family == "Suse" and ansible_distribution_major_version == "15"

- name: read variables for ubuntu 16.04
  include_vars: "vars_os_ubuntu-16.yml"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "16.04"

- name: read variables for ubuntu 18.04
  include_vars: "vars_os_ubuntu-18.yml"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"

- name: read variables for ubuntu 20.04
  include_vars: "vars_os_ubuntu-20.yml"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "20.04"

- name: load default or user settings for requirements
  include_vars: '{{ item }}'
  with_first_found:
    - files:
      - 'vars_user_config.yml'
      - 'vars_user_linux.yml'
      - 'vars_custom_config.yml'
      - 'vars_custom_linux.yml'
      skip: true

# - NOTE ------------------------------------------------------------------
# System update (as requested with Req 17) must be done before security
# configuration. That's why relevante tasks are placed here!
# -------------------------------------------------------------------------


- name: Install EPEL CentoOS repository
  yum:
    name: epel-release
    state: present
  when: 
    - ansible_os_family == "RedHat"
    - config_req_17 | default(true)
    - ansible_check_mode == false

- name: Install containerd from CentOS7 repo
  command: yum install -y --nogpgcheck https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm
  when: 
    - ansible_os_family == "RedHat"
    - config_req_17 | default(true)
    - ansible_check_mode == false


- name: Install device-mapper-persistent-data
  yum:
    name: device-mapper-persistent-data
    state: latest
  when: 
    - ansible_os_family == "RedHat"
    - config_req_17 | default(true)
    - ansible_check_mode == false

- name: Add Docker repo
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docer-ce.repo
  become: yes
  when: 
    - ansible_os_family == "RedHat"
    - config_req_17 | default(true)
    - ansible_check_mode == false

- name: req-017.0 upgrade linux os (redhat)
  yum:
    name: '*'
    state: latest
  when: 
    - ansible_os_family == "RedHat"
    - config_req_17 | default(true)
    - ansible_check_mode == false

- name: req-017.0 upgrade linux os (suse)
  zypper:
    name: '*'
    state: latest 
  when: 
    - ansible_os_family == "Suse"
    - config_req_17 | default(true)
    - ansible_check_mode == false

- name: req-017.1 if exist fix package dependencies (Ubuntu)
  shell: "apt-get install -fy"
  args:
    warn: no
  when: 
    - ansible_os_family == "Debian"
    - config_req_17 | default(true)
    - ansible_check_mode == false

- name: req-017.2 clean apt before updating linux os (ubuntu)
  shell: "apt-get clean"
  args:
    warn: no
  when: 
    - ansible_os_family == "Debian"
    - config_req_17 | default(true)
    - ansible_check_mode == false

- name: req-017.3 upgrade linux os (ubuntu)
  apt:
    upgrade: dist
    update_cache: yes
    cache_valid_time: 3600
    force_apt_get: no
  when: 
    - ansible_os_family == "Debian"
    - config_req_17 | default(true)
    - ansible_check_mode == false

# - NOTE ------------------------------------------------------------------
# Installation of chrony must be placed here because of error when 
# installation is done in linux(02)logging.yml due to /var filesystem 
# has noexec option enabled.
# -------------------------------------------------------------------------

- name: req-030.0 install {{os_timesync_software}} on ubuntu
  apt:
    name: "{{ os_timesync_software }}"
    state: present
    force_apt_get: yes
    update_cache: yes
    cache_valid_time: 3600
  when: 
    - ansible_os_family == "Debian"
    - config_req_30 | default(true)

- name: req-030.0 install {{os_timesync_software}} on non-debian systems
  package:
    name: "{{ os_timesync_software }}"
    state: present
  when: 
    - ansible_os_family != "Debian"
    - config_req_30 | default(true)

# - NOTE ------------------------------------------------------------------
# Installation of MAC solution must be placed here because of error when 
# installation is done in linux(05)mandatory-access-control.yml 
# -------------------------------------------------------------------------

- name: Install packages for CentOS 
  yum:
    name: "{{ item }}"
    state: present
  with_items: ['git', 'rpcbind', 'selinux-policy', 'libselinux', 'docker-ce']
  when: 
    - ansible_os_family == "RedHat"
    - config_req_17 | default(true)
    - ansible_check_mode == false


- name: req-050.0 ensure either SELinux or AppArmor are installed
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ os_install_mac_tools }}"
  when: config_req_50 | default(true)

- import_tasks: linux(01)basic-hardening.yml
- import_tasks: linux(02)logging.yml
- import_tasks: linux(03)pluggable-authentication-modules.yml
- import_tasks: linux(04)iptables.yml
- import_tasks: linux(05)mandatory-access-control.yml
- import_tasks: linux(06)compliance-checks.yml